#!/usr/bin/env python


#this script 
#next script is teaching the DMP

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
import numpy 
from copy import deepcopy

def init():
	rospy.init_node('replay_arm', anonymous=True)
	
	global robot
	robot = moveit_commander.RobotCommander()

	global group
	group = moveit_commander.MoveGroupCommander("right_arm")

    	global hand_subs
    	hand_subs = rospy.Subscriber("chatter", String, phone_callback)
    	rospy.sleep(1)

	global waypoints
	waypoints = []

	global dmp_info_velocities
	dmp_info_velocities = []

	global dmp_info_positions
	dmp_info_positions = []
	
	global dmp_info_accelerations
	dmp_info_accelerations = []

	global dmp_info_effort
	dmp_info_effort = []

	global dmp_info_time_seconds
	dmp_info_time_seconds = []

	global dmp_info_time_nano_seconds
	dmp_info_time_nano_seconds = []

	global starting_pose
	starting_pose = geometry_msgs.msg.Pose()	
	starting_pose.position.x = 0.0
	starting_pose.position.y = 0.5
	starting_pose.position.z = 0.5
	starting_pose.orientation.w = 1.0
	starting_pose.orientation.x = 0.0
	starting_pose.orientation.y = 0.0
	starting_pose.orientation.z = 0.0

	execute_pose(starting_pose)


def phone_callback(data):
	global phone_info
	phone_info = [float(i) for i in data.data.split('_')]
	
	


def pose_from_array(pose):
	pose_target = geometry_msgs.msg.Pose()	
	pose_target.position.x = pose[0]
	pose_target.position.y = pose[1]
	pose_target.position.z = pose[2]
	pose_target.orientation.w = pose[3]
	pose_target.orientation.x = pose[4]
	pose_target.orientation.y = pose[5]
	pose_target.orientation.z = pose[6]
	return pose_target

def execute_pose(pose):
	group.set_pose_target(pose)
	plan1 = group.plan()
	group.execute(plan1, wait = False)

def traj_plan_captured(filename):
	
	data = numpy.load(filename) 

	for i in data: 
		next_pose = geometry_msgs.msg.Pose()	
		next_pose.position.x = 0.0 + i[2]
		next_pose.position.y = 0.5 + i[3]
		next_pose.position.z = 0.5 + i[4]
		next_pose.orientation.w = 1.0
		next_pose.orientation.x = 0.0
		next_pose.orientation.y = 0.0
		next_pose.orientation.z = 0.0

		waypoints.append(copy.deepcopy(next_pose))


		

if __name__ == "__main__":

	init()
	starting_state = group.get_current_pose().pose
	waypoints.append(group.get_current_pose().pose)

	traj_plan_captured('waypoints.npy')

	
	(plan, fraction) = group.compute_cartesian_path(
		                     waypoints,   # waypoints to follow
		                     0.01,        # eef_step
		                     0.0)         # jump_threshold

	print plan , "plan"
	print "============ Waiting while RVIZ displays plan..."
	rospy.sleep(5)

	#print "plan", plan, type(plan)
	for i in plan.joint_trajectory.points:
		dmp_info_positions.append(i.positions)
		dmp_info_velocities.append(i.velocities)	
		dmp_info_accelerations.append(i.accelerations)
		dmp_info_effort.append(i.effort)
		dmp_info_time_seconds.append(i.time_from_start.secs)
		dmp_info_time_nano_seconds.append(i.time_from_start.nsecs)
	
	#saving the trajectory information for dmp"
	numpy.save('position', dmp_info_positions)
	numpy.save('velocities', dmp_info_velocities)
	numpy.save('accelerations', dmp_info_accelerations)
	numpy.save('time_from_start_seconds', dmp_info_time_seconds)
	numpy.save('effort', dmp_info_effort)
	numpy.save('time_from_start_secs', dmp_info_time_seconds)
	numpy.save('time_from_start_nsecs', dmp_info_time_nano_seconds)
	print "Success. Closing Now."
















