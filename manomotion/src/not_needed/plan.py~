#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2013, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Ioan Sucan

from Evangelos import GetIK 
from Evangelos import GetIK as ik
from geometry_msgs.msg import PoseStamped
import sys
import rospy
from moveit_commander import RobotCommander, roscpp_initialize, roscpp_shutdown
from moveit_msgs.msg import RobotState

#import rospy
from moveit_msgs.srv import GetPositionIK
from moveit_msgs.srv import GetPositionIKRequest
from moveit_msgs.srv import GetPositionIKResponse


from sr_robot_commander.sr_arm_commander import SrArmCommander
from sr_utilities.arm_finder import ArmFinder


if __name__=='__main__':
	
	
 
	rospy.init_node("robot_commander_examples", anonymous=True)
	arm_commander = SrArmCommander(name="right_arm", set_ground=True)
    
    	robot = RobotCommander()
    	rospy.sleep(0.1)

    	print "Current state:"
    	print robot.get_current_state()
    	
	# plan to a random location 
    	a = robot.right_arm
    	a.set_start_state(RobotState())
    	r = a.get_random_joint_values()
    	print "Planning to random joint position: "
    	
    	p = a.plan(r)

 
	new_pose = [1.0, 0.0, 0.6, 0, 0, 0]

	# To only plan
	a = arm_commander.plan_to_pose_target(new_pose)
	print("this is the trajectory plan", a)
	# To plan and move
	arm_commander.move_to_pose_target(new_pose)	


	new_pose = [1.4, 0.0, 0.6, 0, 0, 0]

	# To only plan
	arm_commander.plan_to_pose_target(new_pose)

	# To plan and move
	arm_commander.move_to_pose_target(new_pose)	


	#a = object 
	#a.group_name = "right_arm"
	#a.ik_timeout = 1.0
	#a.ik_attempts = 1
	#a.avoid_collisions = False
	#a.ik_srv = rospy.ServiceProxy('/compute_ik', GetPositionIK)
	#a.self.ik_srv.wait_for_service()

	#start = RobotState()	

 	#goal = PoseStamped()
	#goal.header.frame_id = "/rh_wrist"
	#goal.header.stamp = rospy.Time.now()
	#goal.pose.position.x = 1.0
	#goal.pose.position.y = 0.5
	#goal.pose.position.z = 1.0
 	#goal.pose.orientation.x = 0.0
	#goal.pose.orientation.y = 0.0
	#goal.pose.orientation.z = 0.0
	#goal.pose.orientation.w = 1.0
   	
 	#start = PoseStamped()
	#start.header.frame_id = "/rh_wrist"
	#start.header.stamp = rospy.Time.now()
	#start.pose.position.x = 0.9
	#start.pose.position.y = 0.5
	#start.pose.position.z = 1.0
 	#start.pose.orientation.x = 0.0
	#start.pose.orientation.y = 0.0
	#start.pose.orientation.z = 0.0
	#start.pose.orientation.w = 1.0

	#a = object
	#a = GetIK.__init__(a,goal)    	
	#ik.getik(a,goal)
	#ik_solution = ik(goal)
	#print("goal", ik_solution)
   
	 
    	#print type(p)
    	#text_file = open("Output.txt", "w")
    	#text_file.write(p)
    	#text_file.close()
    	roscpp_shutdown()
